/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.JobProcessOrganization;

import Business.EcoSystem;
import Business.Enterpise.Enterprise;
import Business.Enterpise.JobProviderEnterprise;
import Business.Network.Network;
import Business.Organization.JobProcessOrganization;
import Business.Organization.JobProvider.CarpentryJobOrganization;
import Business.Organization.JobProvider.ConstructionJobOrganization;
import Business.Organization.JobProvider.GeneralJobOrganization;
import Business.Organization.JobProvider.ITJobOrganization;
import Business.Organization.JobProvider.SecurityJobOrganization;
import Business.Organization.Organization;
import Business.Questionnaire.Questionnaire;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.JobWorkRequest;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rahul Zore
 */
public class TemporaryPJpanel extends javax.swing.JPanel {

    /**
     * Creates new form TemporaryPJpanel
     */
    private JPanel userProcessContainer;
    private JobProcessOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    EcoSystem business;
    JobWorkRequest request;

    public TemporaryPJpanel(JPanel userProcessContainer, UserAccount userAccount, JobProcessOrganization organization, Enterprise enterprise, EcoSystem business, JobWorkRequest request) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = (JobProcessOrganization) organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.business = business;
        this.request = request;
//        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) jobsTable.getModel();
        Enterprise tm = null;
        for (Network network : business.getNetworkList()) {
            for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (ent instanceof JobProviderEnterprise) {
                    tm = ent;
                    break;
                }
            }
        }

        for (Organization org : tm.getOrganizationList().getOrganizationList()) {
            Object row[] = new Object[1];
            row[0] = org;
            dtm.addRow(row);
//            row[1]=org.getType().getValue();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jobsTable = new javax.swing.JTable();

        searchJButton.setText("Initiate Search");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jobsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Organization Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jobsTable);
        if (jobsTable.getColumnModel().getColumnCount() > 0) {
            jobsTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(397, 397, 397)
                        .addComponent(searchJButton)
                        .addGap(0, 390, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJButtonActionPerformed

        // TODO add your handling code here:
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {

                Enterprise tm = null;
                for (Network network : business.getNetworkList()) {
                    for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (ent instanceof JobProviderEnterprise) {
                            tm = ent;
                            break;
                        }
                    }
                }
                DefaultTableModel dtm = (DefaultTableModel) jobsTable.getModel();

                Questionnaire qus = request.getQuestionaire();
                textArea.append("Knows how to use Computer?\n");

                Thread.sleep(2000);

                if (qus.getJobQuestionaire().isIsComputer()) {
                    for (Organization org : tm.getOrganizationList().getOrganizationList()) {
                        if (org instanceof ITJobOrganization) {
                            Object row[] = new Object[1];
                            row[0] = org;
                            dtm.addRow(row);
                        }
                    }

                    textArea.append("Yes\n");

                } else {
                    textArea.append("No\n");

                }
                Thread.sleep(2000);
                textArea.append("Knows how to read and write?\n");
                Thread.sleep(2000);
                if (qus.getEducationQuestionaire().isIsRead() && qus.getEducationQuestionaire().isIsWrite()) {
                    for (Organization org : tm.getOrganizationList().getOrganizationList()) {
                        if (org instanceof GeneralJobOrganization) {
                            Object row[] = new Object[1];
                            row[0] = org;
                            dtm.addRow(row);
                        }
                    }

                    textArea.append("Yes\n");

                } else {
                    textArea.append("No\n");

                }
                
                
                Thread.sleep(2000);
                textArea.append("Is Physically strong and active?\n");
                Thread.sleep(2000);
                if (qus.getEducationQuestionaire().isIsRead() && qus.getEducationQuestionaire().isIsWrite()) {
                    for (Organization org : tm.getOrganizationList().getOrganizationList()) {
                        if (org instanceof ConstructionJobOrganization || org instanceof CarpentryJobOrganization) {
                            Object row[] = new Object[1];
                            row[0] = org;
                            dtm.addRow(row);
                        }
                    }

                    textArea.append("Yes\n");

                } else {
                    textArea.append("No\n");

                }
                
                
                Thread.sleep(2000);
                textArea.append("Previous experience as a Guard?\n");
                Thread.sleep(2000);
                if (qus.getEducationQuestionaire().isIsRead() && qus.getEducationQuestionaire().isIsWrite()) {
                    for (Organization org : tm.getOrganizationList().getOrganizationList()) {
                        if (org instanceof SecurityJobOrganization) {
                            Object row[] = new Object[1];
                            row[0] = org;
                            dtm.addRow(row);
                        }
                    }

                    textArea.append("Yes\n");

                } else {
                    textArea.append("No\n");

                }
                Thread.sleep(2000);
                textArea.append("Job Search Completed!!");
                JOptionPane.showMessageDialog(null, "Job search has been completed. Please select the best job for the individual!!");
                return null;
            }
        }.execute();


    }//GEN-LAST:event_searchJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jobsTable;
    private javax.swing.JButton searchJButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
